<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Showcase Template</title><link>https://jsalasm.github.io/VisualComputing2022_2/</link><description>Recent content on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://jsalasm.github.io/VisualComputing2022_2/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://jsalasm.github.io/VisualComputing2022_2/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://jsalasm.github.io/VisualComputing2022_2/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://jsalasm.github.io/VisualComputing2022_2/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://jsalasm.github.io/VisualComputing2022_2/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/authors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/authors/</guid><description> Autores # Camilo Andres Contreras Cristancho # Estudiante de Ingeniería de Sistemas y Computación - Universidad Nacional de Colombia Camilo Arturo Echeverry Ayala # Estudiante de Ingeniería de Sistemas y Computación - Universidad Nacional de Colombia Jairo Daniel Salas Mosquera # Estudiante de Ingeniería de Sistemas y Computación - Universidad Nacional de Colombia Juan Camilo Villota Ballesteros # Estudiante de Ingeniería de Sistemas y Computación - Universidad Nacional de Colombia</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/logs/</guid><description> Logs # Lunes 22 de Agosto: # Familiarizacióna con el template de la pagina a usar. Discucion y definicion de las ilusions a tener en cuenta para el desarrollo del taller. Definicion de explorar ilusiones relacionadas a: Ilusión de radios inversa Ilusión de la silueta o la bailarina El Cubo de Necker Miercoles 31 de Agosto: # Desarrollo de animacion basada en las ilusiones anterormente mencionadas</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/buttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/buttons/</guid><description> Buttons # Buttons are styled links that can lead to local page or external link.
Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/columns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/columns/</guid><description>Columns # Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example # Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/details/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/details/</guid><description> Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content # Lorem markdownum insigne&amp;hellip; Title Markdown content # Lorem markdownum insigne&amp;hellip;</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/hints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/hints/</guid><description>Hints # Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example # Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa Markdown content</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/katex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/katex/</guid><description>KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example # {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}} \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Display Mode Example # Here is some inline example: \(\pi(x)\) , rendered in the same line. And below is display example, having display: block \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\] Text continues here.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/mermaid/</guid><description>Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.
Override Mermaid Initialization Config
To override the initialization config for Mermaid, create a mermaid.json file in your assets folder!
Example # {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --&amp;gt; State2 note left of State2 : This is the note to the left.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/p5/div/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/p5/div/</guid><description>p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.
p5-div # {{&amp;lt; p5-div ver=&amp;#34;1.4.2&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Scintillating grid # Look at this and also this among many more references there are.
p5-div markdown {{&amp;lt; p5-div sketch=&amp;#34;/showcase/sketches/scintillating.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/p5/iframe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/p5/iframe/</guid><description>p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.
p5-iframe # {{&amp;lt; p5-iframe ver=&amp;#34;1.4.2&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; width=&amp;#34;800&amp;#34; height=&amp;#34;600&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Color relativity # Look at this brief explanation about what color relativity is.
p5-iframe markdown {{&amp;lt; p5-iframe sketch=&amp;#34;/showcase/sketches/colors.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/tabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/Visual-Computing-2022-2/Documentation-template/tabs/</guid><description>Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example # MacOS MacOS # This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-1/Illusions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-1/Illusions/</guid><description>Taller de Ilusiones # 1. Introducción # En este taller se desea explorar la creación de diferentes ilusiones ópticas haciendo uso de la combinación de diferentes referencias conceptuales basadas en ilusiones que veremos posteriormente.
2. Revisión bibliográfica # Lilac Chaser # Esta ilusion es conocida por tener unas figuras de color magenta redondas, organizadas como un circulo y una cruz en la mitad, de tal manera que el espectador se fije en dicha cruz.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-1/masking/</guid><description>Kernel de imagen # 1. Introducción # En este parte del taller se busca aplicar distintos kernels de imagén junto con varias herramientas de luminosidad o brillo de imagén, partiendo de varios conceptos que serán detallados en el siguiente punto.
2. Revisión bibliográfica # Convolución # Antes que nada, es necesario entender brevemente ¿Qué es una convolución? aplicado al procesamiento de imágenes.
La convolución dentro del procesamiento de imágenes, es el proceso de transformar una imagén aplicando unos valores de un kernel sobre cada píxel y sus vecinos locales.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/ames_window/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/ames_window/</guid><description>Aplicación de las rotaciones y traslaciones de objetos 3D # 1. Introducción # En este punto del taller se busca hacer uso de las transformaciones (rotaciones y traslaciones) de objetos 3D, por medio de la construccion de una ilusion optica llamada la ventana de Amés.
2. Revisión bibliográfica # Traslación # La translación de un objeto consiste en moverlo cierta distancia, en una dirección determinada. En 3D, el sistema de referencia homogéneo tendrá 4 dimensiones, por lo que la traslación del punto \( V = (x,y,z,1) \) quedará indicada como :</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/color-shading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/color-shading/</guid><description>Rasterización - Color Shading # 1. Introducción # En este parte del taller se busca aplicar las coordenadas baricéntricas para la rasterización de una primitiva, como lo es un triángulo, además este sistema de coordenadas se usa para determinar el color en un punto dentro del tríangulo permitiendo crear un degrado entre los distintos colores que tiene cada uno de los vértices.
2. Revisión bibliográfica # Rasterización # La rasterización es el proceso por el cual una primitiva o un gráfico vectorial se transforma en una imagen bidimensional o en un conjunto de píxeles, que luego serán mostrados en pantalla.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/terrain-and-waves/first-wave/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/terrain-and-waves/first-wave/</guid><description>Taller de Ilusiones # 1. Introducción # En este primer punto del ejercicio (Terrain and wave) se busca hacer uso de las transformaciones en objetos 3D. Para este caso, se quiere hacer uso de perspectiva y animacion de un ola sencilla.
2. Revisión bibliográfica # Función Seno # Es una función trigonometrica, dicha funcion periodica se expresa como la razón del cateto opuesto y la hipotenusa, el cual el rango de esta función periodica es −1 ≤ y ≤ 1.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/terrain-and-waves/second-wave/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/terrain-and-waves/second-wave/</guid><description>Taller de Ilusiones # 1. Introducción # En este segundo punto del ejercicio (Terrain and wave) se busca hacer uso de las transformaciones en objetos 3D. Para este caso, se quiere hacer uso de perspectiva y animacion de una ola mas compuesta. Utilizando archivos .obj para darle mas realismo
2. Revisión bibliográfica # Archivos OBJ # Los archivos OBJ, son antiguos archivos para manejar formatos 3D, estos contienen varios puntos, normalmente de 3 coordenadas que se conectan, generando y uniendo distintos poligonos y genera todo un cuerpo, o bueno, en general la superficie del cuerpo.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/terrain-and-waves/terrain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-2/terrain-and-waves/terrain/</guid><description>Taller de Ilusiones # 1. Introducción # En este tercer punto del ejercicio (Terrain and wave) se busca hacer uso de las transformaciones en objetos 3D. Para este caso, se quiere hacer uso de perspectiva y animacion de un terreno, donde coge protagonismo la diferenciacion la tiera y el agua. Utilizando archivos .obj para darle mas realismo
2. Revisión bibliográfica # Aqui se usaran los conceptos de Second_wave
3. Métodos # Se desea implementar la animación de la ola compuesta, en un terreno que diferencie entre el agua y la tierra, de tal manera que se le de un poco mas de inmersion al asunto expuesto.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/1.-Coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/1.-Coloring/</guid><description>Coloring # 1. Introducción # En este parte del taller se busca implimentar distintos modos de mezcla de colores mediante el uso de fragment shaders.
2. Revisión bibligráfica # Color blending # Existen distitas formas de realizar un color blending o mezcla de colores, los cuales son usados en distintos softwares de edición de gráficos como Adobe Photoshop.
a y b son vectores de 3 posiciones, donde cada una de estas corresponde al valor en el espacio de color RGB.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/2.-Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/2.-Texturing/</guid><description>Texturing # Una textura es una imagen (es decir, un mapa de bits o una procedural) mapeada en la superficie de una figura usualmente en un triángulo o basado en ello.
UV Visualization # uv.js let uvShader; function preload() { // Define geometry directly in clip space (i.e., matrices: Tree.NONE). // Interpolate only texture coordinates (i.e., varyings: Tree.texcoords2). // see: https://github.com/VisualComputing/p5.treegl#handling uvShader = readShader(&amp;#39;/VisualComputing2022_2/sketches/Taller3/Texturing/uv.frag&amp;#39;, { matrices: Tree.NONE, varyings: Tree.texcoords2 }); } function setup() { // shaders require WEBGL mode to work createCanvas(300, 300, WEBGL); noStroke(); // see: https://p5js.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/3.-Image-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/3.-Image-processing/</guid><description>Image processing # 1. Introducción # En este parte del taller se busca aplicar distintos kernels de imagén junto con varias herramientas de luminosidad o brillo de imagén, partiendo de varios conceptos que serán detallados en el siguiente punto.
2. Revisión bibliográfica # Convolución # La convolución dentro del procesamiento de imágenes, es el proceso de transformar una imagén aplicando unos valores de un kernel sobre cada píxel y sus vecinos locales.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/4.-Procedural-Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/4.-Procedural-Texturing/</guid><description>Procedural texturing # Una textura procedural es una textura creada utilizando una descripción matemática (es decir, un algoritmo) en lugar de datos almacenados directamente. La ventaja de este enfoque es el bajo costo de almacenamiento, la resolución ilimitada de texturas y el fácil mapeo de texturas. Este tipo de texturas se utilizan a menudo para modelar superficies o representaciones volumétricas de elementos naturales como madera, mármol, granito, metal, piedra y otros.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/5.-Non-Euclidean-Geometry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/5.-Non-Euclidean-Geometry/</guid><description>Non-Euclidean geometry # Resulta que no todo vive en un mundo plano bidimensional y, por lo tanto, no todo está sujeto a las leyes de la geometría euclidiana plana. Por ejemplo: tú, yo y toda la humanidad vivimos en la superficie de la Tierra, y la Tierra no es plana. Es, de hecho, un objeto aproximadamente esférico. Lo que significa que las reglas de la geometría plana no rigen nuestras vidas.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/6.-Ripple-Effect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/6.-Ripple-Effect/</guid><description>Ripple Effect # 1. Revisión bibliográfica # Dentro de la literatura se encuentran varias implementaciones para producir el efecto de onda, sin embargo para este trabajo, se decidio utilizar la implementacion de Hugo Elias. La cual consiste en el uso de dos buffers, los cuales se encargaran de guardar el estado actual y el estado del ciclo anterior del arreglo de pixeles.
Por cada iteracion del ciclo, se calcula el valor de cada pixel, sumando el valor de sus pixeles vecinos en el ciclo anterior y dividiendolo entre dos, luego se le resta el valor del pixel actual en el buffer actual, y se le multiplica por un factor de amortiguacion.</description></item><item><title/><link>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/Bonus.-Surface-Texture-Animation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jsalasm.github.io/VisualComputing2022_2/docs/workshop-3/Bonus.-Surface-Texture-Animation/</guid><description>Surface Texture Animation # 1. Introducción # En este punto se indagó en cómo se puede alterar la superficie de un solido y de igual forma, variarlo respecto a su textura atribuida.
2. Revisión bibliográfica # Prodecural Animation # Es considerado la animación que cambia en tiempo real, normalmente tiende a hacer animaciones complejas, compuestas por un sistemas de las mismas. Por ejemplo existe un cuerpo anátomico donde se quita o se acorta una parte de su extremidad, y su animacion se ve alterada en tiempo real, como se ve ena la siguiente imagen:</description></item></channel></rss>